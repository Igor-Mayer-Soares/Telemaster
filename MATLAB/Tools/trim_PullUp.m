%% Search for a specified operating point for the model - Telemaster Model.
%
% This MATLAB script is the command line equivalent of the trim model
% tab in linear analysis tool with current specifications and options.
% It produces the exact same operating points as hitting the Trim button.

% MATLAB(R) file generated by MATLAB(R) 9.14 and Simulink Control Design (TM) 7.0.
%
% Generated on: 27-Apr-2024 14:39:26

function PullUp = trim_PullUp(Ve,Heq,ThetaDot,model)
%% Trimming Points
[V,H,Thetad] = ndgrid(Ve,Heq,ThetaDot);

%% Create the operating point specification object and options.
opspec = operspec(model);
set_param(model,'LoadInitialState','off');
opt = findopOptions('DisplayReport','iter');
opt.OptimizationOptions.Algorithm = 'sqp';

for cont = 1:numel(V)
    %% Set the constraints on the states in the model.
    % - The defaults for all states are Known = false, SteadyState = true,
    %   Min = -Inf, Max = Inf, dxMin = -Inf, and dxMax = Inf.
    
    % State (1) - TelemasterModel/Telemaster/Custom Variable Mass 6DOF (Quaternion)/Calculate DCM & Euler Angles/phi theta psi
    % - Default model initial conditions are used to initialize optimization.
    opspec.States(1).SteadyState = false;
    
    % State (2) - TelemasterModel/Telemaster/Custom Variable Mass 6DOF (Quaternion)/Calculate DCM & Euler Angles/phi theta psi
    % - Default model initial conditions are used to initialize optimization.
    opspec.States(2).SteadyState = false;
    
    % State (3) - TelemasterModel/Telemaster/Custom Variable Mass 6DOF (Quaternion)/Calculate DCM & Euler Angles/phi theta psi
    % - Default model initial conditions are used to initialize optimization.
    opspec.States(3).SteadyState = false;
    
    % State (4) - TelemasterModel/Telemaster/Custom Variable Mass 6DOF (Quaternion)/p,q,r
    % - Default model initial conditions are used to initialize optimization.
    opspec.States(4).SteadyState = false;
    
    % State (5) - TelemasterModel/Telemaster/Custom Variable Mass 6DOF (Quaternion)/p,q,r
    % - Default model initial conditions are used to initialize optimization.
    opspec.States(5).SteadyState = false;
    
    % State (6) - TelemasterModel/Telemaster/Custom Variable Mass 6DOF (Quaternion)/p,q,r
    % - Default model initial conditions are used to initialize optimization.
    opspec.States(6).SteadyState = false;
    
    % State (7) - TelemasterModel/Telemaster/Custom Variable Mass 6DOF (Quaternion)/ub,vb,wb
    opspec.States(7).x = V(cont);
    opspec.States(7).SteadyState = false;
    
    % State (8) - TelemasterModel/Telemaster/Custom Variable Mass 6DOF (Quaternion)/ub,vb,wb
    % - Default model initial conditions are used to initialize optimization.
    opspec.States(8).SteadyState = false;
    
    % State (9) - TelemasterModel/Telemaster/Custom Variable Mass 6DOF (Quaternion)/ub,vb,wb
    % - Default model initial conditions are used to initialize optimization.
    opspec.States(9).SteadyState = false;
    
    % State (10) - TelemasterModel/Telemaster/Custom Variable Mass 6DOF (Quaternion)/xe,ye,ze
    % - Default model initial conditions are used to initialize optimization.
    opspec.States(10).SteadyState = false;
    
    % State (11) - TelemasterModel/Telemaster/Custom Variable Mass 6DOF (Quaternion)/xe,ye,ze
    % - Default model initial conditions are used to initialize optimization.
    opspec.States(11).SteadyState = false;
    
    % State (12) - TelemasterModel/Telemaster/Custom Variable Mass 6DOF (Quaternion)/xe,ye,ze
    % - Default model initial conditions are used to initialize optimization.
    opspec.States(12).SteadyState = false;
    
    %% Set the constraints on the inputs in the model.
    % - The defaults for all inputs are Known = false, Min = -Inf, and
    % Max = Inf.
    
    % Input (1) - TelemasterModel/aileron
    % - Default model initial conditions are used to initialize optimization.
    opspec.Inputs(1).Known = true;
    opspec.Inputs(1).u   = 0;
    opspec.Inputs(1).Min = -10;
    opspec.Inputs(1).Max = 10;
    
    % Input (2) - TelemasterModel/throttle
    opspec.Inputs(2).u = 0.8;
    opspec.Inputs(2).Min = 0;
    opspec.Inputs(2).Max = 1;
    
    % Input (3) - TelemasterModel/elevator
    % - Default model initial conditions are used to initialize optimization.
    opspec.Inputs(3).Min = -20;
    opspec.Inputs(3).Max = 20;
    
    % Input (4) - TelemasterModel/rudder
    % - Default model initial conditions are used to initialize optimization.
    opspec.Inputs(4).Known = true;
    opspec.Inputs(4).u   = 0;
    opspec.Inputs(4).Min = -20;
    opspec.Inputs(4).Max = 20;
    
    %% Set the constraints on the outputs in the model.
    % - The defaults for all outputs are Known = false, Min = -Inf, and
    % Max = Inf.
    
    % u_dot - TelemasterModel/Out1
    % - Default model initial conditions are used to initialize optimization.
    opspec.Outputs(1).Known = true;
    
    % v_dot - TelemasterModel/Out2
    % - Default model initial conditions are used to initialize optimization.
    opspec.Outputs(2).Known = true;
    
    % w_dot - TelemasterModel/Out3
    % - Default model initial conditions are used to initialize optimization.
    opspec.Outputs(3).Known = true;
    
    % p_dot - TelemasterModel/Out4
    % - Default model initial conditions are used to initialize optimization.
    opspec.Outputs(4).Known = true;
    
    % q_dot - TelemasterModel/Out5
    % - Default model initial conditions are used to initialize optimization.
    opspec.Outputs(5).Known = true;
    
    % r_dot - TelemasterModel/Out6
    % - Default model initial conditions are used to initialize optimization.
    opspec.Outputs(6).Known = true;
    
    % phi_dot - TelemasterModel/Out7
    % - Default model initial conditions are used to initialize optimization.
    opspec.Outputs(7).Known = true;
    
    % theta_dot - TelemasterModel/Out8
    % - Default model initial conditions are used to initialize optimization.
    opspec.Outputs(8).Known = Thetad(cont);
    opspec.Outputs(8).Known = true;
    
    % psi_dot - TelemasterModel/Out9
    % - Default model initial conditions are used to initialize optimization.
    opspec.Outputs(9).Known = true;
    
    % x_dot - TelemasterModel/Out10
    opspec.Outputs(10).y = V(cont);
    opspec.Outputs(10).Known = false;
    
    % y_dot - TelemasterModel/Out11
    % - Default model initial conditions are used to initialize optimization.
    opspec.Outputs(11).Known = true;
    
    % z_dot - TelemasterModel/Out12
    % - Default model initial conditions are used to initialize optimization.
    opspec.Outputs(12).Known = true;
    
    % nCb_y - TelemasterModel/Out13
    % - Default model initial conditions are used to initialize optimization.
    opspec.Outputs(13).Known = true;
    
    % H - TelemasterModel/Out14
    opspec.Outputs(14).y = H(cont);
    opspec.Outputs(14).Known = true;

    % V - TelemasterModel/Out27
    opspec.Outputs(27).y = V(cont);
    opspec.Outputs(27).Known = true;

    %% Perform the operating point search.
    [op,opreport] = findop(model,opspec,opt);

    PullUp(cont).V         = V(cont);
    PullUp(cont).H         = H(cont);
    PullUp(cont).Thetadot  = Thetad(cont);
    PullUp(cont).ail       = op.Inputs(1, 1).u;
    PullUp(cont).thr       = op.Inputs(2, 1).u;
    PullUp(cont).ele       = op.Inputs(3, 1).u;
    PullUp(cont).rud       = op.Inputs(4, 1).u;
    PullUp(cont).alpha     = rad2deg(atan2(opreport.States(9, 1).x,opreport.States(7, 1).x));
    PullUp(cont).trim      = string(opreport.TerminationString) == 'Operating point specifications were successfully met.' && (-10 < PullUp(cont).alpha) && (PullUp(cont).alpha < 15);
    PullUp(cont).op        = op;
    PullUp(cont).opreport  = opreport;
end
end